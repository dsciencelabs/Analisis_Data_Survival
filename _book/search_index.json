[["fundamental-sql.html", "Bab 3 Fundamental SQL 3.1 Connecting R to MySQL 3.2 Create DB 3.3 Drop DB 3.4 Create Table 3.5 Insert Value 3.6 Truncate Table 3.7 Drop Table 3.8 Write Table 3.9 Alter Table 3.10 Add Column 3.11 Drop Column 3.12 Modify Column 3.13 Constraints", " Bab 3 Fundamental SQL In the previous section, we learned how to connect R to a Database System (SQL) Such as RMariaDB, RMySQL, and RSQLite. In this section, we continue to cover all that you have to know about fundamental operations in SQL (Here, focus on RMySQL). 3.1 Connecting R to MySQL Connecting R to MySQL is made very easy with the RMySQL package. To connect to a MySQL database simply install the package and load the library. library(RMySQL) MySQL &lt;- dbConnect(MySQL(), user=&#39;root&#39;, password=&#39;&#39;, dbname=&#39;mysql&#39;, host=&#39;localhost&#39;) dbListTables(MySQL) # a list of the tables in our connection Note: Open and your XAMPP, click start on Apache and MySQL. Then, make sure you have the admin privilege before creating any database. 3.2 Create DB If you want to create a new database, then the CREATE DATABASE statement would be as shown below: dbExecute(MySQL, &quot;CREATE DATABASE factory_db&quot;) The result show us 1, means that you have succeeded to create a database. 3.3 Drop DB If you want to delete an existing database, then the DROP DATABASE statement would be as shown below: dbExecute(MySQL, &quot;DROP DATABASE factory_db&quot;) The result show us 0, means that you have succeeded to remove (Drop) a database. 3.4 Create Table Once you have a database, you can continue to create table as shown below: dbExecute(MySQL, &quot;CREATE TABLE Persons( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255))&quot;) 3.5 Insert Value If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows: dbExecute(MySQL,&quot;INSERT INTO Persons(PersonID,LastName,FirstName, Address,City) VALUES(1,&#39;Siregar&#39;,&#39;Bakti&#39;, &#39;Jl.Bahagia&#39;,&#39;Tangerang&#39;)&quot;) 3.6 Truncate Table The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself. dbExecute(MySQL, &quot;TRUNCATE TABLE Persons&quot;) 3.7 Drop Table The DROP TABLE statement is used to drop an existing table in a database. dbExecute(MySQL, &quot;DROP TABLE Persons&quot;) 3.8 Write Table The key here is the dbWriteTable function which allows us to write an R data frame directly to a database table. The data frame’s column names will be used as the database table’s fields. Orders &lt;-read.csv(&quot;data/Orders.csv&quot;) dbWriteTable(MySQL, &quot;Orders&quot;, Orders, append=T) 3.9 Alter Table The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. The ALTER TABLE statement is also used to add and drop various constraints on an existing table. 3.10 Add Column To add a column in a table, use the following syntax: dbExecute(MySQL, &quot;ALTER TABLE Orders ADD Email varchar(255)&quot;) 3.11 Drop Column To delete a column in a table, use the following syntax (notice that some database systems don’t allow deleting a column): dbSendQuery(MySQL, &quot;ALTER TABLE Orders DROP COLUMN Email&quot;) 3.12 Modify Column dbSendQuery(MySQL,&quot; ALTER TABLE Orders MODIFY COLUMN OrderDate date&quot;) 3.13 Constraints SQL constraints are used to specify rules for the data in a table. Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted. Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table. The following constraints are commonly used in SQL: NOT NULL: Ensures that a column cannot have a NULL value UNIQUE: Ensures that all values in a column are different PRIMARY KEY: A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table FOREIGN KEY: Uniquely identifies a row/record in another table CHECK: Ensures that all values in a column satisfies a specific condition DEFAULT: Sets a default value for a column when no value is specified INDEX: Used to create and retrieve data from the database very quickly 3.13.1 Not Null The following SQL ensures that the “ID”, “LastName”, and “FirstName” columns will NOT accept NULL values when the “Persons_NotNull” table is created: dbSendQuery(MySQL,&quot;CREATE TABLE Person_NotNull ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255) NOT NULL, Age int)&quot;) 3.13.2 Unique The following SQL creates a UNIQUE constraint on the “ID” column when the “Persons” table is created: dbSendQuery(MySQL,&quot;CREATE TABLE Persons_Unique (ID int NOT NULL UNIQUE, LastName varchar(255) NOT NULL, FirstName varchar(255) NOT NULL, Age int)&quot;) To create a UNIQUE constraint on the “ID” column when the table is already created, use the following SQL: dbSendQuery(MySQL,&quot;ALTER TABLE Persons_Unique ADD UNIQUE (ID)&quot;) To define a UNIQUE constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL,&quot;ALTER TABLE Persons_Unique ADD CONSTRAINT UNIQUE (ID,LastName)&quot; To drop a UNIQUE constraint, use the following SQL: dbSendQuery(MySQL,&quot;ALTER TABLE Persons_Unique DROP INDEX ID&quot;) 3.13.3 Primary Key The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). dbSendQuery(MySQL,&quot;CREATE TABLE Persons_PK (ID int NOT NULL PRIMARY KEY, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int)&quot;) To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL,&quot;CREATE TABLE Persons_PK (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, CONSTRAINT Persons_PK PRIMARY KEY (ID,LastName))&quot;) To create a PRIMARY KEY constraint on the “ID” column when the table is already created, use the following SQL: dbSendQuery(MySQL, &quot;ALTER TABLE Persons_PK ADD PRIMARY KEY (ID)&quot;) 3.13.4 Foreign Key A FOREIGN KEY is a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table. Look at the following two tables: “Persons” table: PersonID LastName FirstName Age 1 Xi Bakti 28 2 Li Chong 23 3 Gou Mei 20 “Orders” table: OrderID OrderNumber PersonID 1 77895 3 2 44678 3 Notice that the “PersonID” column in the “Orders” table points to the “PersonID” column in the “Persons” table. The “PersonID” column in the “Persons” table is the PRIMARY KEY in the “Persons” table. The “PersonID” column in the “Orders” table is a FOREIGN KEY in the “Orders” table. The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables. The FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the table it points to. To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL, &quot;CREATE TABLE Orders (OrderID int NOT NULL, OrderNumber int NOT NULL, PersonID int, CONSTRAINT FOREIGN KEY (PersonID))&quot;) To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL, &quot;CREATE TABLE Orders ( OrderID int NOT NULL, OrderNumber int NOT NULL, PersonID int, PRIMARY KEY (OrderID), FOREIGN KEY (PersonID) REFERENCES Persons_pk (PersonID))&quot;) To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL, &quot;ALTER TABLE Orders ADD CONSTRAINT FK_Person Order FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)&quot;) 3.13.5 Check The CHECK constraint is used to limit the value range that can be placed in a column. If you define a CHECK constraint on a single column it allows only certain values for this column. If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row. The following SQL creates a CHECK constraint on the “Age” column when the “Persons” table is created. The CHECK constraint ensures that the age of a person must be 18, or older: dbSendQuery(MySQL, &quot;CREATE TABLE Persons (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, CHECK (Age&gt;=18))&quot;) To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL, &quot;CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, City varchar(255), CONSTRAINT CHK_Person CHECK (Age&gt;=18 AND City=&#39;Sandnes&#39;))&quot;) To create a CHECK constraint on the “Age” column when the table is already created, use the following SQL: dbSendQuery(MySQL, &quot;ALTER TABLE Persons ADD CHECK (Age&gt;=18)&quot;) To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax: dbSendQuery(MySQL, &quot;ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age&gt;=18 AND City=&#39;Sandnes&#39;)&quot;) 3.13.6 Default The DEFAULT constraint is used to provide a default value for a column. The default value will be added to all new records IF no other value is specified. The following SQL sets a DEFAULT value for the “City” column when the “Persons” table is created: dbSendQuery(MySQL, &quot;CREATE TABLE Persons_default (ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, City varchar(255) DEFAULT &#39;Sandnes&#39;)&quot;) To create a DEFAULT constraint on the “City” column when the table is already created, use the following SQL: dbSendQuery(MySQL,&quot;ALTER TABLE Persons ALTER City SET DEFAULT &#39;Sandnes&#39;&quot;) 3.13.7 Index The CREATE INDEX statement is used to create indexes in tables. Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries. Creates an index on a table. Duplicate values are allowed: dbSendQuery(MySQL, &quot;CREATE INDEX idx_pname ON Persons (LastName, FirstName)&quot;) Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against. 3.13.8 Auto Increment Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table. Often this is the primary key field that we would like to be created automatically every time a new record is inserted. The following SQL statement defines the “Personid” column to be an auto-increment primary key field in the “Persons” table: dbSendQuery(MySQL, &quot;CREATE TABLE Persons_ai ( Personid int NOT NULL AUTO_INCREMENT, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (Personid))&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
