[["connecting-r-to-sql.html", "Bab 2 Connecting R to SQL 2.1 Introduction 2.2 Getting Started 2.3 Connecting R to SQL 2.4 Import Data 2.5 Write Dataframe to Database 2.6 General Query", " Bab 2 Connecting R to SQL 2.1 Introduction A database is a structured set of data. Terminology is a little bit different when working with a database management system compared to working with data in R. field: variable or quantity record: collection of fields table: collection of records with all the same fields database: collection of tables The relationship between R terminology and database terminology is explained below. R terminology Database terminology column field row record data frame table types of columns table schema collection of data frames database SQL (Structured Query Language) allows you to directly interact with a database and perform tasks such as pull data and make updates. R has two packages available that make it easy to run SQL queries: DBI,RMariaDB,RMySQL, and RSQLite. 2.2 Getting Started To get started, install the following packages in your R Console pane. install.packages(c( &quot;RMariaDB&quot;, &quot;RMySQL&quot;, &quot;RSQLite&quot;, &quot;RPostgres&quot; ) ) Then, load all these requirement packages: # install.packages(&quot;pacman&quot;) pacman::p_load( RMariaDB, # Database Interface and &#39;MariaDB&#39; Driver RMySQL, # Database Interface and &#39;RMySQL&#39; Driver RSQLite, # Database Interface and &#39;RSQLite&#39; Driver RPostgres # Database Interface and &#39;RPostgres&#39; Driver ) 2.3 Connecting R to SQL There are many ways to connect your database with R. This article shows you three of the most common ways: MariaDB &lt;- dbConnect(RMariaDB::MariaDB(), user=&#39;root&#39;, password=&#39;&#39;, dbname=&#39;bakti&#39;, host=&#39;localhost&#39;) dbListTables(MariaDB) # table list on your database dbExecute(MariaDB,&quot;CREATE DATABASE new_MariaDB&quot;) # Create a new Database dbExecute(MariaDB,&quot;DROP DATABASE new_MariaDB&quot;) # Drop a Database MySQL &lt;- dbConnect(MySQL(), user=&#39;root&#39;, password=&#39;&#39;, dbname=&#39;bakti&#39;, host=&#39;localhost&#39;) dbListTables(MySQL) # table list on your database dbExecute(MySQL,&quot;CREATE DATABASE new_MySQL&quot;) # Create a new Database dbExecute(MySQL,&quot;DROP DATABASE new_MySQL&quot;) # Drop a Database postgres &lt;- dbConnect(RPostgres::Postgres(), user=&#39;postgres&#39;, password=&#39;1234&#39;, dbname=&#39;postgres&#39;, host=&#39;localhost&#39;) dbListTables(postgres) # table list on your database dbExecute(postgres,&quot;CREATE DATABASE new_MySQL&quot;) # Create a new Database dbExecute(postgres,&quot;DROP DATABASE new_MySQL&quot;) # Drop a Database RSQLite &lt;- dbConnect(RSQLite::SQLite(), &quot;folder_db/mydb3.sqlite&quot;) dbListTables(RSQLite) # table list on your database Notes: RSQLite will store the database you created in your current working directory. 2.4 Import Data This section can be ignored if the data (table) that you need is already registered in your database. If not, then it is necessary to import data set according to your available files (here, I guide you with files CSV and XLSX). In your practice, you can choose either one. 2.4.1 CSV Files Customers &lt;-read.csv(&quot;data/Customers.csv&quot;) Categories &lt;-read.csv(&quot;data/Categories.csv&quot;) Employees &lt;-read.csv(&quot;data/Employees.csv&quot;) OrderDetails&lt;-read.csv(&quot;data/OrderDetails.csv&quot;) Orders &lt;-read.csv(&quot;data/Orders.csv&quot;) Products &lt;-read.csv(&quot;data/Products.csv&quot;) Shippers &lt;-read.csv(&quot;data/Shippers.csv&quot;) Suppliers &lt;-read.csv(&quot;data/Suppliers.csv&quot;) 2.4.2 XLSX Files library(&quot;readxl&quot;) Customers &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=1) Categories &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=2) Employees &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=3) OrderDetails&lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=4) Orders &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=5) Products &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=6) Shippers &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=7) Suppliers &lt;-read_excel(&quot;data/RawDatabase.xlsx&quot;,sheet=8) 2.5 Write Dataframe to Database The key here is the dbWriteTable function which allows us to write an R data frame directly to a database table. The data frame’s column names will be used as the database table’s fields. In the following example I use RMariaDB connection, you can apply another driver as you like. new_con &lt;- dbConnect(MariaDB(), user=&#39;root&#39;, password=&#39;&#39;, dbname=&#39;new_MariaDB&#39;, host=&#39;localhost&#39;) dbWriteTable(new_con, &quot;Customers&quot;, Customers, append=T) dbWriteTable(new_con, &quot;Categories&quot;, Categories, append=T) dbWriteTable(new_con, &quot;Employees&quot;, Employees, append=T) dbWriteTable(new_con, &quot;OrderDetails&quot;, OrderDetails, append=T) dbWriteTable(new_con, &quot;Orders&quot;, Orders, append=T) dbWriteTable(new_con, &quot;Products&quot;, Products, append=T) dbWriteTable(new_con, &quot;Shippers&quot;, Shippers, append=T) dbWriteTable(new_con, &quot;Suppliers&quot;, Suppliers, append=T) Note: Some important things that must be considered when storing table data are as follows: Data Structure adjustments Changes Data type (especially, Date and Time) In this case, we have a problem with the data table Employees and Orders. When you consider these Table (Employees and Orders), you will find there is no date are written correctly in the database. In order to handle this problem, just type the following code in your R console: dbRemoveTable(new_con, &quot;Orders&quot;) Orders[&quot;OrderDate&quot;] &lt;-as.Date(Orders$OrderDate, format = &quot;%Y-%m-%d&quot;) dbWriteTable(new_con, &quot;Orders&quot;, Orders, append=T) Your Exercise: Do the same thing to update data table Employees 2.6 General Query 2.6.1 SELECT FROM The SELECT statement is used to select data from a database. library(DT) df1&lt;-dbGetQuery(new_con,&#39;SELECT city FROM Customers&#39;) datatable(df1) 2.6.2 WHERE The WHERE clause is used to filter records, extract only those records that fulfill a specified condition. df2&lt;-dbGetQuery(new_con,&quot;SELECT * FROM Customers WHERE Country=&#39;Germany&#39;&quot;) datatable(df2) 2.6.3 INSERT INTO If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows: dbExecute(new_con,&quot;INSERT INTO Customers(CustomerName,ContactName,Address,City,PostalCode, Country) VALUES(&#39;Bakti&#39;,&#39;Siregar&#39;,&#39;Jl.Bahagia Selalu&#39;,&#39;Tangerang&#39;,&#39;081369&#39;,&#39;Indonesia&#39;)&quot;) 2.6.4 DELETE FROM The DELETE statement is used to delete existing records in a table. dbExecute(new_con,&quot;DELETE FROM Customers WHERE CustomerName =&#39;Bakti&#39; &quot;) 2.6.5 UPDATE The UPDATE statement is used to modify the existing records in a table. dbExecute(new_con,&quot;UPDATE Customers SET ContactName = &#39;Alfred Schmidt&#39;, City= &#39;Frankfurt&#39; WHERE CustomerID = 1&quot;) 2.6.6 Disconnect Database If you are done with the query process and you don’t want to use it anymore, you should disconnect the connection from your database. dbDisconnect(new_con) # disconnect from your database "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
